// x86-64 processor support
// https://github.com/usbarmory/tamago
//
// Copyright (c) WithSecure Corporation
//
// Use of this source code is governed by the license
// that can be found in the LICENSE file.

#include "go_asm.h"
#include "textflag.h"

TEXT ·handleException(SB),NOSPLIT|NOFRAME,$0
	CLI

	// find ISR offset from stack linking information (see irqHandler)
	MOVQ	isr-(0)(SP), AX
	SUBQ	$(const_callSize), AX
	MOVQ	AX, ·currentVector(SB)

	// TODO: implement runtime.CallOnG0 for a cleaner approach
	CALL	·DefaultExceptionHandler(SB)

// To allow a single user-defined ISR for all vectors, a jump table of CALLs,
// which save the vector PC on the stack, is built to use as IDT offsets.
TEXT ·irqHandler(SB),NOSPLIT|NOFRAME,$0
	// 0 to 31 - Exceptions
	CALL	·handleException(SB) //  0 - Divide by Zero
	CALL	·handleException(SB) //  1 - Debug
	JMP	·handleNMI(SB)       //  2 - NMI
	CALL	·handleException(SB) //  3 - Breakpoint
	CALL	·handleException(SB) //  4 - Overflow
	CALL	·handleException(SB) //  5 - Bound Range
	CALL	·handleInterrupt(SB) //  6 - Invalid Opcode
	CALL	·handleException(SB) //  7 - Device Not Available
	CALL	$0 // triple fault   //  8 - Double Fault
	CALL	·handleException(SB) //  9 - Reserved
	CALL	·handleException(SB) // 10 - Invalid TSS
	CALL	·handleException(SB) // 11 - Segment Not Present
	CALL	·handleException(SB) // 12 - Stack Fault
	CALL	·handleException(SB) // 13 - General Protection
	CALL	$0 // triple fault   // 14 - Page Fault
	CALL	·handleException(SB) // 15 - Reserved
	CALL	·handleException(SB) // 16 - x87 Floating Point
	CALL	·handleException(SB) // 17 - Alignment Check
	CALL	·handleException(SB) // 18 - Machine Check
	CALL	·handleException(SB) // 19 - SIMD Floating Point
	CALL	·handleException(SB) // 20 - Virtualization
	CALL	·handleException(SB) // 21 - Control Protection
	CALL	·handleException(SB) // 22 - Reserved
	CALL	·handleException(SB) // 23 - Reserved
	CALL	·handleException(SB) // 24 - Reserved
	CALL	·handleException(SB) // 25 - Reserved
	CALL	·handleException(SB) // 26 - Reserved
	CALL	·handleException(SB) // 27 - Reserved
	CALL	·handleException(SB) // 28 - Hypervisor Injection
	CALL	·handleException(SB) // 29 - VMM Communication
	CALL	·handleException(SB) // 30 - Security
	CALL	·handleException(SB) // 31 - Reserved

	// 32 to 255 - User Defined Interrupts
	CALL	·handleInterrupt(SB) // 32
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // ...
	CALL	·handleInterrupt(SB) // 255
